Tools

Nodemon
    nodemon, ia bisa dikatakan wajib digunakan selama proses pengembangan. Pasalnya, 
    dengan tools ini kita tak perlu menjalankan ulang server ketika terjadi perubahan 
    pada berkas JavaScript. Nodemon akan mendeteksi perubahan kode JavaScript dan 
    mengeksekusi ulang secara otomatis.

npm install nodemon --save-dev

ESLint
    ESLint, ia dapat membantu atau membimbing Anda untuk selalu menuliskan kode 
    JavaScript dengan gaya yang konsisten. Seperti yang Anda tahu, JavaScript 
    tidak memiliki aturan yang baku untuk gaya penulisan kode, bahkan penggunaan 
    semicolon. Karena itu, terkadang kita jadi tidak konsisten dalam menuliskannya.

    ESLint dapat mengevaluasi kode yang dituliskan berdasarkan aturan yang Anda 
    terapkan. Anda bisa menuliskan aturannya secara mandiri atau menggunakan 
    gaya penulisan yang sudah ada seperti AirBnb JavaScript Code Style, 
    Google JavaScript Code Style, dan StandardJS Code Style. 

Untuk menggunakan ESLint, pasanglah package ESLint pada devDependencies proyek Anda.
Caranya, silakan eksekusi perintah berikut di Terminal:

npm install eslint --save-dev

Nanoid
    nanoid merupakan salah satu library yang populer untuk menangani pembuatan id yang unik

---------------------------------------------------------------------------------------------------------

    Same-Origin Policy
Server dapat menampung sebuah website, aplikasi, gambar, video, dan masih banyak 
lagi. Ketika server menampung website, mungkin beberapa data gambar, video, 
stylesheet biasanya diambil dari alamat server lain atau origin yang berbeda. 
Contohnya stylesheet yang diambil dari Bootstrap CDN ataupun gambar yang 
diperoleh dari server Unsplash. Hal ini wajar dan biasa dilakukan.

Namun apakah Anda tahu bahwa tidak semua data bisa diambil dari origin 
yang berbeda? Contohnya data JSON yang didapatkan melalui teknik XMLHTTPRequest 
atau fetch. Jika website meminta sesuatu menggunakan teknik tersebut dari luar 
origin-nya, maka permintaan tersebut akan ditolak. Itu disebabkan oleh kebijakan 
same-origin. Kasus ini terjadi pada aplikasi client dan web server yang kita buat.

Origin terdiri dari tiga hal: protokol, host, dan port number. Origin dari aplikasi client kita adalah

http://notesapp-v1.dicodingacademy.com

Di mana protokolnya adalah http://, host-nya adalah notesapp-v1.dicodingacademy.com, dan port-nya adalah :80 (implisit).

Selama aplikasi client mengakses data dari origin yang sama, hal itu dapat 
dilakukan. Namun bila ada salah satu saja yang berbeda contohnya port 8001, 
maka permintaan itu akan ditolak.

Dengan begitu jelas yah, apa penyebab gagalnya aplikasi client ketika melakukan 
permintaan ke web server yang kita buat. Sudah jelas keduanya memiliki origin 
yang berbeda. Origin web server kita saat ini adalah http://localhost:5000/

Lalu, apa solusi agar keduanya dapat berinteraksi? Tenang, untungnya ada 
mekanisme yang dapat membuat mereka saling berinteraksi. Mekanisme tersebut 
disebut Cross-origin resource sharing (CORS). Pertanyaannya, bagaimana cara 
menerapkannya?

Cukup mudah! Pada web server, kita hanya perlu memberikan nilai header 
‘Access-Control-Allow-Origin’ dengan nilai origin luar yang akan 
mengkonsumsi datanya (aplikasi client).

///
const response = h.response({ error: false, message: 'Catatan berhasil ditambahkan' });
 
response.header('Access-Control-Allow-Origin', 'http://notesapp-v1.dicodingacademy.com');
 
return response;
////

Atau Anda bisa menggunakan tanda * pada nilai origin untuk memperbolehkan data 
dikonsumsi oleh seluruh origin.

///
const response = h.response({ error: false, message: 'Catatan berhasil ditambahkan' });
 
response.header('Access-Control-Allow-Origin', '*');
 
return response;
///

Dengan Hapi, CORS dapat ditetapkan pada spesifik route dengan menambahkan properti 
options.cors di konfigurasi route. Contohnya seperti ini:

{
  method: 'POST',
  path: '/notes',
  handler: addNoteHandler,
  options: {
    cors: {
      origin: ['*'],
    },
  },
},

Bila ingin cakupannya lebih luas alias CORS diaktifkan di seluruh route 
yang ada di server, Anda bisa tetapkan CORS pada konfigurasi ketika hendak 
membuat server dengan menambahkan properti routes.cors. Contohnya seperti ini:

const server = Hapi.server({
  port: 5000,
  host: 'localhost',
  routes: {
    cors: {
      origin: ['*'],
    },
  },
});

